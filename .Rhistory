library(gfpop)
?gfpop
vignette(gfpop)
browseVignettes("gfpop")
devtools::install_github("vrunge/gfpop", build_vignettes = TRUE)
browseVignettes("gfpop")
sum(1:10)
sum(1:9)
sum(1:9) * 2
sum(1:10) * 2
sum(1:9) * 2
?shiny
library(shiny)
?shiny
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
devtools::install_github("shiny", "rstudio")
if (!require("devtools"))
install.packages("devtools")
devtools::install_github("shiny", "rstudio")
if (!require("devtools"))
install.packages("devtools")
devtools::install_github("rstudio/shiny")
?shiny
?sample.int
sample.int(10000000, 1)
seed1 <- sample.int(1000000, 1)
set.seed(seed1)
n1 <- 250
lambda1 <- sample.int(10, 1)
size1 <- sample.int(100, 1)
sampleprop <- sample(c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9), 1)
if(input$distribution == "Poisson"){
rpois(n1, lambda1)
}
rpois(n1, lambda1)
rbinom(n1, size1, sampleprop)
runif(n1, max = lambda1)
library(shiny); runApp('~/Downloads/scratch.R')
Frequency <- c(rep(NA, ceiling(max(x_val()))))
x_val <- runif(n1, max = lambda1)
frequency <- c(rep(NA, ceiling(max(x_val))))
frequency
x_val
frequency <- c(rep(NA, ceiling(max(x_val))))
for(i in 1:ceiling(max(x_val))){
Frequency[i] <- length(x_val[x_val() <= i & x_val() > (i-1)])
}
for(i in 1:ceiling(max(x_val))){
Frequency[i] <- length(x_val[x_val <= i & x_val > (i-1)])
}
Frequency <- c(rep(NA, ceiling(max(x_val)))
for(i in 1:ceiling(max(x_val))){
Frequency[i] <- length(x_val[x_val <= i & x_val > (i-1)])
}
Frequency <- c(rep(NA, ceiling(max(x_val))))
for(i in 1:ceiling(max(x_val))){
Frequency[i] <- length(x_val[x_val <= i & x_val > (i-1)])
}
expvals <- rep((1/ceiling(max(x_val()))), ceiling(max(x_val())))
expvals <- rep((1/ceiling(max(x_val)), ceiling(max(x_val))
expvals <- rep((1/ceiling(max(x_val)), ceiling(max(x_val))
expvals <- rep((1/ceiling(max(x_val)), ceiling(max(x_val))))
expvals <- rep((1/ceiling(max(x_val))), ceiling(max(x_val)))
expvals <- expvals*n1
data.frame(c(1:length(Frequency)), Frequency, c(1:5))
Frequency
1:length(Frequency)
data.frame(c(1:length(Frequency)), Frequency)
data.frame(c(1:length(Frequency)), Frequency)
runApp('~/Downloads/scratch.R')
runApp('~/Downloads/scratch.R')
?eventReactive
runApp('~/Downloads/scratch.R')
Frequency <- 1:5
data.frame(c(1:length(Frequency)), Frequency, c(1:5))
Frequency <- 1:10
data.frame(c(1:length(Frequency)), Frequency, c(1:5))
runApp('~/Downloads/scratch.R')
Frequency <- 1:5
data.frame(c(1:length(Frequency)), Frequency, c(1:5))
Frequency <- 1:8
data.frame(c(1:length(Frequency)), Frequency, c(1:5))
runApp('~/Downloads/scratch.R')
runApp('~/Downloads/scratch.R')
runApp('~/Downloads/scratch.R')
install.packages("golem")
setwd("~/Documents/gfpop-gui")
setwd("~/Documents/gfpop-gui")
golem::create_golem(".")
setwd("~/Documents/gfpopgui")
golem::create_golem(".")
golem::create_golem(".")
?devtools::check
test_check("gfpopgui")
library(testthat)
test_check("gfpopgui")
library(testthat)
library(gfpopgui)
test_check("gfpopgui")
library(gfpopgui)
test_check("gfpopgui")
devtools::check()
skip_on_cran()
skip_on_travis()
skip_on_appveyor()
x <- processx::process$new(
"R",
c(
"-e",
"pkgload::load_all(here::here());run_app()"
)
)
x
x$is_alive()
x$kill()
x
devtools::check(env_vars = list(NOT_CRAN = "false"))
devtools::check(env_vars = list(NOT_CRAN = "false"))
install.packages("rhub")
rhub::check_for_cran()
golem::add_shinyappsio_file()
use_coverage(type = c("codecov"))
library(usethis)
use_coverage(type = c("codecov"))
use_covr_ignore(c("docs/", "website/"))
use_covr_ignore(c("R/app_config.R", "R/golems_utils_server.R", "R/golem_utils_ui.R", "R/run_app.R"))
